apply plugin: 'jacoco'

jacoco {
    toolVersion '0.8.7'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

project.afterEvaluate {
    tasks.create(name: "debugCoverage", type: JacocoReport, dependsOn: "testDebugUnitTest") {

        group = "Reporting"
        description = "Generate Jacoco coverage reports for the debug build."

        reports {
            html.enabled = true
            xml.enabled = true
        }

        def excludes = [
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/*Test*.*',
                'android/**/*.*',
                'androidx/**/*.*',
                '**/*$ViewInjector*.*',
                '**/*Dagger*.*',
                '**/*MembersInjector*.*',
                '**/*_Factory.*',
                '**/*_Provide*Factory*.*',
                '**/*_ViewBinding*.*',
                '**/AutoValue_*.*',
                '**/R2.class',
                '**/R2$*.class',
                '**/*Directions$*',
                '**/*Directions.*',
                '**/*Binding.*',
                '**/*\$Lambda$*.*',
                '**/*\$inlined$*.*'
        ]

        def sourceDirs = ["${project.projectDir}/src/main/kotlin"]
        def kClasses = "${project.buildDir}/tmp/kotlin-classes/debug"
        def kotlinClasses = fileTree(dir: kClasses, excludes: excludes)

        sourceDirectories.from = files(sourceDirs)
        classDirectories.from = files([kotlinClasses])
        executionData.from = files(["${project.buildDir}/jacoco/testDebugUnitTest.exec"])
    }
}